name: Publish Python 🐍 distributions 📦 to PyPI

on:
  push:
    tags:
     - '*'

jobs:
  build-n-publish:
    name: Build and publish Python 🐍 distributions 📦 to PyPI
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@master
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: >-
        python3 -m
        pip install setuptools wheel twine
    - name: Extract tag name
      id: tag
      run: echo ::set-output name=TAG_NAME::$(echo $GITHUB_REF | cut -d / -f 3)
    - name: Update version in setup.py
      run: >-
        sed -i "s/{{VERSION_PLACEHOLDER}}/${{ steps.tag.outputs.TAG_NAME }}/g" setup.py
    - name: Build a binary wheel
      run: >-
        python3 setup.py sdist bdist_wheel
    - name: Publish distribution 📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user:__token__
        # password: ${{ secrets.PYPI_API_TOKEN }}
        password: 
pypi-AgEIcHlwaS5vcmcCJGJkNjAyMDhjLTIxNjMtNDE4OC1iOGIxLTc4YWIyY2RhZWRmNgACKlszLCI1MmY2MjY3OC1iMzRiLTQ0NTctYWUwZi01NjNkYWQ1ZWQyMjIiXQAABiBcC31VZYlI-S0C-M_Tqs0vpi7Op0KpZoexkwuEOztE5w














# name: Publish Python 🐍 distribution 📦 to PyPI and TestPyPI

# on: push

# jobs:
#   build:
#     name: Build distribution 📦
#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v4
#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: "3.11"
#     - name: Install pypa/build
#       run: >-
#         python3 -m
#         pip install
#         build
#     - name: Build a binary wheel and a source tarball
#       run: python3 -m build
#     - name: Store the distribution packages
#       uses: actions/upload-artifact@v3
#       with:
#         name: python-package-distributions
#         path: dist/

#   publish-to-pypi:
#     name: >-
#       Publish Python 🐍 distribution 📦 to PyPI
#     if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
#     needs:
#     - build
#     runs-on: ubuntu-latest
#     environment:
#       name: pypi
#       url: https://pypi.org/p/dspy-ai-hmoazam # Replace <package-name> with your PyPI project name
#     permissions:
#       id-token: write  # IMPORTANT: mandatory for trusted publishing

#     steps:
#     - name: Download all the dists
#       uses: actions/download-artifact@v3
#       with:
#         name: python-package-distributions
#         path: dist/
#     - name: Publish distribution 📦 to PyPI
#       uses: pypa/gh-action-pypi-publish@release/v1

#   github-release:
#     name: >-
#       Sign the Python 🐍 distribution 📦 with Sigstore
#       and upload them to GitHub Release
#     needs:
#     - publish-to-pypi
#     runs-on: ubuntu-latest

#     permissions:
#       contents: write  # IMPORTANT: mandatory for making GitHub Releases
#       id-token: write  # IMPORTANT: mandatory for sigstore

#     steps:
#     - name: Download all the dists
#       uses: actions/download-artifact@v3
#       with:
#         name: python-package-distributions
#         path: dist/
#     - name: Sign the dists with Sigstore
#       uses: sigstore/gh-action-sigstore-python@v1.2.3
#       with:
#         inputs: >-
#           ./dist/*.tar.gz
#           ./dist/*.whl
#     - name: Create GitHub Release
#       env:
#         GITHUB_TOKEN: ${{ github.token }}
#       run: >-
#         gh release create
#         '${{ github.ref_name }}'
#         --repo '${{ github.repository }}'
#         --notes ""
#     - name: Upload artifact signatures to GitHub Release
#       env:
#         GITHUB_TOKEN: ${{ github.token }}
#       # Upload to GitHub Release using the `gh` CLI.
#       # `dist/` contains the built packages, and the
#       # sigstore-produced signatures and certificates.
#       run: >-
#         gh release upload
#         '${{ github.ref_name }}' dist/**
#         --repo '${{ github.repository }}'